- Adding support for multiple loops generated for scans. This is
  useful for the case of trees with a variable number of children per
  node. This can be done by marking the additional loops to be
  generated (apart from the scan axis which is currently generated)
  not opaque, as all the spatial axis currently are.

- Data structure dependency aware barrier placement.

- Sparse indexing into data structure tensors, as opposed to the
  current dense one.

- Equality of UFs when one of the two UFs uses a cached copy of some
  tensor.

- Cooperative groups

- Compute_with: Create an envelope like ScanEnvelope, with the common
  outer loops being generated by the envelope, much like the multiple
  loops generated by scan approach above.

- Reductions on element loops

- Test flexible bounds for GPU threads during bounds inference

- TVM currently assumes conservatively that all if statements may
  cause divergence and hence refuses to add code syncs inside any if
  statement. This should be made more precise as we'll need to work
  with if statements arising due to tiling.

- Supporting index expressions that depend on other index
  variables. This will be needed to cache child tensors of data
  structures.
